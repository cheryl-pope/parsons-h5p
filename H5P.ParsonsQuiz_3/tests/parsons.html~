<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" 
                    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.js"></script>
    <script type="text/javascript" src="../parsons.js"></script>
     <link rel="stylesheet" href="http://github.com/jquery/qunit/raw/master/qunit/qunit.css" type="text/css" media="screen" />
     <script type="text/javascript" src="http://github.com/jquery/qunit/raw/master/qunit/qunit.js"></script>

     <script>


             module("Independent utilities");
			 
			 test("getRandomPermutation", function() {
			 	     var initial = [[0, 'foo'],
                                    [1, 'bar']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					var perm = parson.getRandomPermutation(2)
			 		equals(perm.length,2);
						
					 });
			 
			 

	         module("Initialization");
			    test("Initialization of internal data structures", function() {
    	             var initial = [[0, 'foo'],
                                    [1, 'bar']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					 parson.createHtml();
						 
                     expect(3);
                     equals(parson.extra_lines.length, 0);
					 equals(parson.model_solution.length, 2);
					 equals(parson.modified_lines.length, 2);
					 });

					 
             module("Feedback without extra lines");

			    test("Indentation error on second line", function() {
    	             var initial = [[0, 'foo'],
                                    [1, 'bar']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					 parson.createHtml();
						 
                     expect(2);
                     ok(0 == parson.extra_lines.length, "No extra lines were given");
					 ok(parson.getFeedback().length > 0);
                 });
				 
				test("No errors", function() {
                     var initial = [[0, 'def traverse_in_order(binary_node):'],
                                    [0, 'if binary_node:']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					 parson.createHtml();
						 
                     expect(2);
                     ok(0 == parson.extra_lines.length, "No extra lines were given");
					 ok(parson.getFeedback().length == 0, "No indentation so all should be fine");
                 });
				 

             module("getModifiedCode with or without permutations");
			 
			   var noPermutation = function(n) {return [0, 1];};
			   var swapPermutation = function(n) {return [1, 0];};
			 
			   test("First two lines swapped in the beginning", function() {
                     var initial = [[0, 'foo'],
                                    [0, 'bar']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					 
					 
					 parson.createHtml(swapPermutation);
					 var modified = parson.getModifiedCode();

                     expect(2);
					 equals(modified[0].code, 'bar');
					 equals(modified[1].code, 'foo');
                 });
			   test("First two lines are not swapped", function() {
                     var initial = [[0, 'foo'],
                                    [0, 'bar']];                                    
                     var parson = new ParsonsWidget( {'codeLines': initial,
					 	                              'sortableId': 'main'});
					 
					 
					 parson.createHtml(noPermutation);
					 var modified = parson.getModifiedCode();

                     expect(2);
					 equals(modified[0].code, 'foo');
					 equals(modified[1].code, 'bar');
                 });

             test("first test within module", function() {
                     ok( true, "all pass" );
                 });


     
  </script>
  
</head>
<body>
 <div id="main"> </div>
	
 <h1 id="qunit-header">js-parsons tests</h1>
 <h2 id="qunit-banner"></h2>
 <h2 id="qunit-userAgent"></h2>
 <ol id="qunit-tests"></ol>
</body>
</html>
